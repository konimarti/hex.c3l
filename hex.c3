/*
 * Hex implements hexadecimal encoding and decoding.
 * Based on the Go implementation src/encoding/hex/hex.go
 */

module encoding::hex;

const HEXTABLE = "0123456789abcdef";
const REVERSE_HEXTABLE = ""
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\xff\xff\xff\xff\xff\xff"
"\xff\x0a\x0b\x0c\x0d\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\x0a\x0b\x0c\x0d\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";


/* Returns the length of an encoding of n source bytes. */
fn int encoded_len(int n) => n * 2;

/* Hexadecimal Encodes src into dst. Returns the number of bytes written to
 * dst.
 */
 import std::io;
fn int encode(char[] src, char[] dst) {
	int j = 0;
	foreach (v : src) {
		io::printfn("v=%d", v);
		io::printfn("v>>4=%d", v>>4);

		dst[j] = HEXTABLE[v>>4];
		dst[j + 1] = HEXTABLE[v&0x0f];
		j = j + 2;
	}
	return src.len * 2;
}

module encoding::hex @test;

import std::io;

struct TestCase {
	char[] input;
	char[] expected;
}

TestCase[] tests = {
	{"", ""},
	{{'g'}, "67"},
	{{'0','1','2','3','4','5','6','7'}, "0001020304050607"},
};

fn void test_encode() {
	int n;
	foreach (t : tests) {
		char [64] buf;
		n = hex::encode(t.input, buf[:t.input.len*2]);
		io::printfn("got: %s, wanted: %s", buf[:n], t.expected);
		assert(t.expected == buf[:n]);
	}
}



